# # Source system profiles
[[ -e /etc/profile ]] && source /etc/profile
[[ -e ~/.profile ]] && source ~/.profile 

if [[ -d "$HOME/.nix-profile/share/zsh/site-functions/" ]]; then
  fpath+="$HOME/.nix-profile/share/zsh/site-functions/" 
fi

[[ -f ~/.config/zsh/functions.zsh ]] && source ~/.config/zsh/functions.zsh

# History
HISTFILE=~/.zsh_history

# Enable additional glob operators. (Globbing = pattern matching)
# https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation
setopt EXTENDED_GLOB

# Max number of entries to keep in history file.
SAVEHIST=$(( 100 * 1000 ))      # Use multiplication for readability.

# Max number of history entries to keep in memory.
HISTSIZE=$(( 1.2 * SAVEHIST ))  # Zsh recommended value

# Use modern file-locking mechanisms, for better safety & performance.
setopt HIST_FCNTL_LOCK

# Keep only the most recent copy of each duplicate entry in history.
setopt HIST_IGNORE_ALL_DUPS

# Auto-sync history between concurrent sessions.
setopt SHARE_HISTORY

# Install zinit if not installed
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -f ${ZINIT_HOME}/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "${ZINIT_HOME:h}"
    command git clone https://github.com/zdharma-continuum/zinit "${ZINIT_HOME}"
fi

source "${ZINIT_HOME}/zinit.zsh"

zi ice pick"async.zsh" src"pure.zsh"
zi light sindresorhus/pure

zinit light zdharma-continuum/zinit-annex-bin-gem-node

#
# Load core plugins with zinit
zinit wait lucid light-mode for \
  atinit"zicompinit; zicdreplay" \
      zdharma-continuum/fast-syntax-highlighting \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions 
  # jeffreytse/zsh-vi-mode # slow plugin

zinit wait lucid light-mode for \
  nix-community/nix-zsh-completions 
  # is-snippet if"[[ -d \"$HOME/.nix-profile\" ]]" as=completion blockf \
  #   ~/.nix-profile/share/zsh/site-functions/
# zinit wait lucid light-mode for \
#   as"command" \
#   from"gh-r" bpick"atuin-*.tar.gz" mv"atuin*/atuin -> atuin" pick"atuin" \
#   atclone"./atuin init zsh > init.zsh; ./atuin gen-completions --shell zsh > _atuin" \
#   atpull"%atclone" src"init.zsh" \
#   atinit"zicompinit; zicdreplay" \
#   atuinsh/atuin


# jq is required for zinit-annex-patch-dl
# zinit wait lucid light-mode for \
#     from'gh-r' \
#     sbin'* -> jq' \
#     nocompile \
#   @jqlang/jq

  # atclone"dircolors -b LS_COLORS > clrs.zsh" \
  #   atpull'%atclone' pick"clrs.zsh" nocompile'!' \
  #   atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”' \
  #   trapd00r/LS_COLORS \
zinit pack for ls_colors

zinit wait lucid light-mode for zdharma-continuum/history-search-multi-word
#'OMZ::lib/theme-and-appearance.zsh' \

# patch-dl is need for fzf bgn-binary
zinit light zdharma-continuum/zinit-annex-patch-dl

# zinit wait lucid light-mode from"gh-r" sbin"fzf;fzf-tmux" for junegunn/fzf-bin
# zinit pack"bgn-binary+keys" for fzf

# Configure prompt
# PROMPT='%F{cyan}%n%f@%F{green}%m:%F{yellow}%~%f$ '
#
zinit wait lucid for \
    has"docker" as"completion" is-snippet 'https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker' \
    as'completion' is-snippet 'https://github.com/docker/compose/blob/v1/contrib/completion/zsh/_docker-compose'


zinit wait lucid light-mode nocompile run-atpull atpull"%atclone" as"completion" blockf for \
  has"helm" id-as"helm-completion"  atclone"helm completion zsh > _helm"  src"_helm" @zdharma-continuum/null \
  has"poetry" id-as"poetry-completion"  atclone"poetry completions zsh > _poetry" src"_poetry"  @zdharma-continuum/null \
  has"kubectl" id-as"kubectl-completion"  atclone"kubectl completion zsh > _kubectl"  src"_kubectl" @zdharma-continuum/null \
  has"rustup" id-as"rustup-completion"  atclone"rustup completions zsh > _rustup && rustup completions zsh cargo > _cargo"  multisrc"_rustup|_cargo" @zdharma-continuum/null \
  has"gh" id-as"gh-completion" atclone"gh -s zsh completion > _gh"  src"_gh" @zdharma-continuum/null \
  has"chezmoi" id-as"chezmoi-completion"  atclone"chezmoi completion zsh > _chezmoi"  src"_chezmoi" @zdharma-continuum/null  \
  has"bw" id-as"bw-completion" atclone"bw completion --shell zsh > _bw" src"_bw"  @zdharma-continuum/null 
  # has"gh" id-as"gh-copilot-alias" atclone"gh copilot alias -- zsh > gh_copilot_alias.sh" as"null" pick"gh_copilot_alias.sh" @zdharma-continuum/null \

# direnv for nixos
zinit wait lucid light-mode run-atpull id-as"direnv-nixos" has"direnv" as"null" atclone'direnv hook zsh > zhook.zsh' \
    atpull'%atclone' src"zhook.zsh" for \
    @zdharma-continuum/null

zinit wait2 lucid light-mode nocompile run-atpull atpull"%atclone" for \
  has"scw" id-as"scw-completion" atclone"scw autocomplete script shell=zsh > scw.sh" pick"scw.sh" @zdharma-continuum/null \
  id-as"brew-shellenv" if"[[ -v HOMEBREW_PREFIX ]]" atclone"$HOMEBREW_PREFIX/bin/brew shellenv > brew-env.sh" pick"brew-env.sh" @zdharma-continuum/null 


if [[ -n "$IS_WSL" ]]; then
  # zsh-autosuggestions on WSL2 lag because of /mnt/c/Windows/ in path
  unsetopt PATH_DIRS 
fi

  # zinit wait lucid light-mode for \
  #   atinit"zstyle :omz:plugins:ssh-agent identities id_ed25519" OMZ::plugins/ssh-agent/ssh-agent.plugin.zsh 
  #   # OMZ::lib/clipboard.zsh \
  #   # OMZ::lib/history.zsh 
  #   # OMZ::plugins/vscode/vscode.plugin.zsh
{{ if .is_work }}
  # work config
{{ else if .is_home }}
zinit wait lucid for \
  atinit"zstyle :omz:plugins:ssh-agent identities id_ed25519" OMZ::plugins/ssh-agent/ssh-agent.plugin.zsh 
  # OMZ::lib/clipboard.zsh \
  # OMZ::lib/history.zsh 
  # OMZ::plugins/vscode/vscode.plugin.zsh

#### VSCode integration
zinit wait lucid light-mode run-atpull atpull"%atclone" blockf for \
  has"code" id-as"vscode-completion" if='[[ "${TERM_PROGRAM}" == "vscode" ]]' \
  atclone"code --locate-shell-integration-path zsh > vscode.zsh" pick"vscode.sh" @zdharma-continuum/null

hash exa 2>/dev/null && alias ls='exa --classify --header --git --group'
hash nvim 2>/dev/null && alias vim='nvim'

if [[ -n "$IN_NIX_SHELL" ]]; then
  echo "🚀 Inside a Nix devshell"
  hash starship 2>/dev/null && eval "$(starship init zsh)"
fi

# eval "$(atuin init zsh)"
zinit wait lucid  light-mode for atuinsh/atuin

{{ else }}
  # light config
{{ end }}

