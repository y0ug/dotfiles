# # Source system profiles
[[ -e /etc/profile ]] && source /etc/profile
[[ -e ~/.profile ]] && source ~/.profile 

: ${ZSH_ENV:=min}

# History
HISTFILE=~/.zsh_history

# Number of history entries
HISTSIZE=100000
SAVEHIST=100000

# History options
setopt APPEND_HISTORY           # Append to the history file, don't overwrite
setopt SHARE_HISTORY            # Share history across all sessions
setopt INC_APPEND_HISTORY       # Incrementally append to the history file
setopt HIST_IGNORE_ALL_DUPS     # Ignore duplicated commands in history
setopt HIST_FIND_NO_DUPS        # Avoid duplicates when searching history
setopt HIST_REDUCE_BLANKS       # Remove superfluous blanks from each command
setopt HIST_VERIFY              # Show the command with history expansion applied before executing

# Install zinit if not installed
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [[ ! -f ${ZINIT_HOME}/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "${ZINIT_HOME:h}"
    command git clone https://github.com/zdharma-continuum/zinit "${ZINIT_HOME}"
fi

source "${ZINIT_HOME}/zinit.zsh"

zi ice pick"async.zsh" src"pure.zsh"
zi light sindresorhus/pure

#
# Load core plugins with zinit
zinit wait lucid light-mode for \
  atinit"zicompinit; zicdreplay" \
      zdharma-continuum/fast-syntax-highlighting \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions \
  jeffreytse/zsh-vi-mode

  # atclone"dircolors -b LS_COLORS > clrs.zsh" \
  #   atpull'%atclone' pick"clrs.zsh" nocompile'!' \
  #   atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”' \
  #   trapd00r/LS_COLORS \
zinit pack for ls_colors

zinit wait lucid light-mode for zdharma-continuum/history-search-multi-word
#'OMZ::lib/theme-and-appearance.zsh' \

zinit light zdharma-continuum/zinit-annex-bin-gem-node
# patch-dl is need for fzf bgn-binary
zinit light zdharma-continuum/zinit-annex-patch-dl

# zinit wait lucid light-mode from"gh-r" sbin"fzf;fzf-tmux" for junegunn/fzf-bin
zinit pack"bgn-binary+keys" for fzf

# Configure prompt
# PROMPT='%F{cyan}%n%f@%F{green}%m:%F{yellow}%~%f$ '
#
zinit wait lucid for \
    has"docker" as"completion" is-snippet 'https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker' \
    as'completion' is-snippet 'https://github.com/docker/compose/blob/v1/contrib/completion/zsh/_docker-compose'


zinit wait lucid light-mode nocompile run-atpull atpull"%atclone" as"completion" blockf for \
  has"helm" id-as"helm-completion"  atclone"helm completion zsh > _helm"  src"_helm" @zdharma-continuum/null \
  has"poetry" id-as"poetry-completion"  atclone"poetry completions zsh > _poetry" src"_poetry"  @zdharma-continuum/null \
  has"kubectl" id-as"kubectl-completion"  atclone"kubectl completion zsh > _kubectl"  src"_kubectl" @zdharma-continuum/null \
  has"rustup" id-as"rustup-completion"  atclone"rustup completions zsh > _rustup && rustup completions zsh cargo > _cargo"  multisrc"_rustup|_cargo" @zdharma-continuum/null \
  has"gh" id-as"gh-completion" atclone"gh -s zsh completion > _gh"  src"_gh" @zdharma-continuum/null \
  has"gh" id-as"gh-copilot-alias" atclone"gh copilot alias -- zsh > gh_copilot_alias.sh" as"null" pick"gh_copilot_alias.sh" @zdharma-continuum/null \
  has"chezmoi" id-as"chezmoi-completion"  atclone"chezmoi completion zsh > _chezmoi"  src"_chezmoi" @zdharma-continuum/null  \
  has"bw" id-as"bw-completion" atclone"bw completion --shell zsh > _bw" src"_bw"  @zdharma-continuum/null 

zinit wait lucid light-mode nocompile run-atpull atpull"%atclone" for \
  id-as"brew-shellenv" if"[[ -v HOMEBREW_PREFIX ]]" atclone"$HOMEBREW_PREFIX/bin/brew shellenv > brew-env.sh" pick"brew-env.sh" @zdharma-continuum/null \
  has"scw" id-as"scw-completion" atclone"scw autocomplete script > scw.sh" pick"scw.sh" @zdharma-continuum/null 
  # id-as"conda-env" if"[[ -v CONDA_PREFIX ]]" atclone"$CONDA_PREFIX/bin/conda shell.zsh hook > conda-env.sh" pick"conda-env.sh" @zdharma-continuum/null \

{{ if .is_work }}
  # work config
{{ else if .is_home }}
  # home config
  
# Load starship
# zinit ice wait sbin="starship" from"gh-r" \
#           atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
#           atpull"%atclone" src"init.zsh" \
# zinit light starship/starship
# eval "$(starship init zsh)"

zinit wait lucid for \
    pick'kubectx;kubens' \
    from'gh-r' \
    sbin'kubectx;kubens'  \
  ahmetb/kubectx

zinit wait lucid light-mode for \
  as="program" from"gh-r" sbin"./eza" \
  dl="https://raw.githubusercontent.com/eza-community/eza/main/completions/zsh/_eza -> _eza" \
  atload"alias la='eza --all --git --color=auto'
      alias ls='eza --git --color=auto'
      alias ll='eza --long --all --git --color=auto'" \
  eza-community/eza 

zinit wait light-mode lucid blockf for \
  as="program" from="gh-r" \
    sbin="./fd-*/fd" \
    cp="./fd-*/fd.1 -> ${ZINIT[MAN_DIR]}/man1/fd.1" \
    @sharkdp/fd

zinit wait light-mode lucid blockf for \
  as="program" from="gh-r" \
    sbin="./bat-*/bat" \
    cp="./bat-*/bat.1 -> ${ZINIT[MAN_DIR]}/man1/bat.1" \
    mv="./bat-*/autocomplete/bat.zsh -> _bat" \
    @sharkdp/bat \
    fdellwing/zsh-bat 

zinit wait light-mode lucid blockf for \
  as="program" from="gh-r" \
    sbin="./ripgrep-*/rg" \
    cp="./ripgrep-*/doc/rg.1 -> ${ZINIT[MAN_DIR]}/man1/rg.1" \
    @BurntSushi/ripgrep

zinit wait light-mode lucid blockf for \
  as="program" from="gh-r" \
    sbin="./hexyl-*/hexyl" \
    cp="./hexyl-*/hexyl.1 -> ${ZINIT[MAN_DIR]}/man1/hexyl.1" \
    @sharkdp/hexyl

zinit wait lucid for \
    from'gh-r' \
    sbin'**/lazygit' \
  jesseduffield/lazygit

zinit wait lucid for \
  atinit"zstyle :omz:plugins:ssh-agent identities id_ed25519" OMZ::plugins/ssh-agent/ssh-agent.plugin.zsh \
  OMZ::lib/clipboard.zsh \
  OMZ::lib/history.zsh 
  # OMZ::plugins/vscode/vscode.plugin.zsh

#### VSCode integration
if [[ $(command -v code) ]]; then
  zinit is-snippet lucid if='[[ "${TERM_PROGRAM}" == "vscode" ]]' for \
    "$(code --locate-shell-integration-path zsh)"
fi

{{ else }}
  # light config
{{ end }}

